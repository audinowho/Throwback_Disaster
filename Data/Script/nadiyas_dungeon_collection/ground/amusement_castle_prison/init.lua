--[[
    init.lua
    Created: 05/01/2023 09:56:49
    Description: Autogenerated script file for the map amusement_castle_prison.
]]--
-- Commonly included lua functions and data
require 'nadiyas_dungeon_collection.common'
require 'nadiyas_dungeon_collection.commonex'

-- Package name
local amusement_castle_prison = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = STRINGS.MapStrings['SomeStringName']


-------------------------------
-- Map Callbacks
-------------------------------
---amusement_castle_prison.Init(map)
--Engine callback function
function amusement_castle_prison.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  
  COMMON.RespawnAllies()

end

---amusement_castle_prison.Enter(map)
--Engine callback function
function amusement_castle_prison.Enter(map)

  GAME:CutsceneMode(true)
  local player = CH("PLAYER")
  GROUND:Hide("Kecleon")
  if SV.global_quest.StoryProgression == 18 then
    SV.amusement_castle_prison =
	{
	  noctowl = false
	}
	SV.checkpoint = 
	{
	  Zone    = 'td_throwback_land', Segment  = -1,
	  Map  = 10, Entry  = 0
	}
    GROUND:TeleportTo(CH('PLAYER'), 72, 144, Direction.Down)
	GROUND:CharSetAnim(player,"Sleep",true)
	GAME:FadeIn(75)
	GAME:WaitFrames(40)
	GROUND:CharEndAnim(player)
	GAME:WaitFrames(40)
	GROUND:CharSetEmote(player, "question", 1)
	SOUND:PlayBattleSE("EVT_Emote_Confused")
	GAME:WaitFrames(40)
	GROUND:CharAnimateTurn(player, Direction.Left, 5, false)
	GAME:WaitFrames(40)
	GROUND:CharAnimateTurn(player, Direction.Right, 5, true)
	GAME:WaitFrames(40)
	GROUND:CharAnimateTurn(player, Direction.Down, 5, false)
	GAME:WaitFrames(60)
	GROUND:CharSetEmote(player, "sweating", 1)
	SOUND:PlayBattleSE("EVT_Emote_Sweating")
	GAME:WaitFrames(120)
  else
    if SV.global_quest.StoryProgression > 20 then
	  GROUND:Hide("Block_2")
	  GROUND:RemoveCharacter("Misdreavus")
	  GROUND:RemoveCharacter("Zigzagoon")
	  GROUND:RemoveCharacter("Vulpix")
	end
    GROUND:Hide("Block_1")
	GROUND:RemoveCharacter("Kecleon")
	GROUND:RemoveCharacter("Gapori")
	GROUND:Hide("Block")
	if SV.amusement_castle_prison.noctowl == true then
	  GROUND:Hide("PassThrough")
	  GROUND:TeleportTo(CH("Noctowl"), 460, 237, Direction.Left)
	end
  end
  TASK:StartScriptLocalCoroutine(function() amusement_castle_prison.MusicChange() end)
  GAME:CutsceneMode(false)
  if SV.wipedout == true then
    GROUND:TeleportTo(CH('PLAYER'), 72, 144, Direction.Down)
	GAME:FadeIn(30)
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Message_0']))
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Message_1']))
	SV.wipedout = false
  end
  GAME:FadeIn(30)
  
end

---amusement_castle_prison.Exit(map)
--Engine callback function
function amusement_castle_prison.Exit(map)


end

---amusement_castle_prison.Update(map)
--Engine callback function
function amusement_castle_prison.Update(map)


end

---amusement_castle_prison.GameSave(map)
--Engine callback function
function amusement_castle_prison.GameSave(map)


end

---amusement_castle_prison.GameLoad(map)
--Engine callback function
function amusement_castle_prison.GameLoad(map)

  TASK:StartScriptLocalCoroutine(function() amusement_castle_prison.MusicChange() end)
  GAME:FadeIn(20)

end

-------------------------------
-- Entities Callbacks
-------------------------------
function amusement_castle_prison.MusicChange()
  if SV.global_quest.StoryProgression < 21 then
    SOUND:PlayBGM("NadEvent07. Deception.ogg", true)
  elseif SV.global_quest.StoryProgression < 99 then
    SOUND:PlayBGM("Nad120. Trouble at Night.ogg", true)
  else
    SOUND:PlayBGM("Nad119. Royal Palace.ogg", true)
  end
end

function amusement_castle_prison.Assembly_Action(obj, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  UI:ResetSpeaker()
  COMMON.ShowTeamAssemblyMenu(obj, COMMON.RespawnAllies)
end

function amusement_castle_prison.Storage_Action(obj, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON:ShowTeamStorageMenu()
end

function amusement_castle_prison.Block_1_Action(obj, activator)
  if SV.global_quest.StoryProgression == 18 then
    local gapori = CH("Gapori")
	local kecleon = CH("Kecleon")
	local player = CH("PLAYER")
    SV.global_quest.StoryProgression = 19
	GAME:CutsceneMode(true)
	gapori.CollisionDisabled = true
	kecleon.CollisionDisabled = true
	GROUND:MoveToPosition(gapori, 147, 125, false, 2)
	GAME:WaitFrames(30)
	GROUND:AnimateInDirection(gapori, "Walk", Direction.Left, Direction.Right, 24, 1, 1)
	GROUND:CharWaitAnim(gapori, "Rotate")
	GROUND:MoveToPosition(gapori, 99, 146, true, 4)
	GAME:WaitFrames(30)
	GROUND:CharSetEmote(gapori, "sweating", 1)
	SOUND:PlayBattleSE("EVT_Emote_Sweating")
	GAME:WaitFrames(60)
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Pain")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_0']))
	GROUND:CharSetEmote(player, "notice", 1)
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GAME:WaitFrames(30)
	GROUND:MoveToPosition(player, 77, 163, false, 2)
	GROUND:CharTurnToCharAnimated(player, gapori, 4)
	GROUND:CharTurnToCharAnimated(gapori, player, 4)
	UI:SetSpeakerEmotion("Surprised")
	choices = {STRINGS:Format(STRINGS.MapStrings['Answer_0_A']),
    STRINGS:Format(STRINGS.MapStrings['Answer_0_B'])}
	UI:BeginChoiceMenu(STRINGS:Format(STRINGS.MapStrings['Gapori_1']), choices, 1, 3)
	UI:WaitForChoice()
	ch = UI:ChoiceResult()
	if ch == 1 then
	UI:SetSpeakerEmotion("Angry")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_2_A']))
	else
	UI:SetSpeakerEmotion("Sad")
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_2_B']))
	end
	GAME:WaitFrames(30)
	GROUND:CharSetEmote(gapori, "notice", 1)
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GAME:WaitFrames(30)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_3']))
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_4']))
	UI:SetSpeakerEmotion("Pain")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_5']))
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_6']))
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_7']))
	GAME:WaitFrames(30)
	GROUND:CharAnimateTurn(gapori, Direction.UpRight, 8, false)
	GAME:WaitFrames(30)
	GROUND:CharSetEmote(gapori, "sweatdrop", 1)
	SOUND:PlayBattleSE("EVT_Emote_Sweatdrop")
	GAME:WaitFrames(60)
	GROUND:CharTurnToCharAnimated(gapori, player, 4)
	GAME:WaitFrames(30)
	COMMONEX.CharacterIntroduction('Introduction_Gapori')
	gapori.Data.Nickname = 'Gapori'
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Normal")
	choices = {STRINGS:Format(STRINGS.MapStrings['Answer_1_A']),
    STRINGS:Format(STRINGS.MapStrings['Answer_1_B'])}
	UI:BeginChoiceMenu(STRINGS:Format(STRINGS.MapStrings['Gapori_8']), choices, 1, 3)
	UI:WaitForChoice()
	ch = UI:ChoiceResult()
	if ch == 1 then
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_9_A']))
	else
	UI:SetSpeakerEmotion("Worried")
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_9_B']))
	end
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_10']))
	choices = {STRINGS:Format(STRINGS.MapStrings['Answer_2_A']),
    STRINGS:Format(STRINGS.MapStrings['Answer_2_B'])}
	UI:BeginChoiceMenu(STRINGS:Format(STRINGS.MapStrings['Gapori_11']), choices, 1, 3)
	UI:WaitForChoice()
	ch = UI:ChoiceResult()
	UI:SetSpeakerEmotion("Determined")
	if ch == 1 then
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_12_A']))
	else
    UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_12_B']))
	end
	GAME:WaitFrames(30)
	GROUND:CharSetEmote(gapori, "notice", 1)
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GAME:WaitFrames(30)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_13']))
	UI:SetSpeakerEmotion("Joyous")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_14']))
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_15']))
	GAME:FadeOut(true,20)
	GROUND:Hide("Block_1")
	GROUND:Hide("Block")
	GAME:FadeIn(20)
	GROUND:CharSetEmote(player, "shock", 1)
	GROUND:CharSetEmote(gapori, "shock", 1)
	SOUND:PlayBattleSE("EVT_Emote_Shock")
	GAME:WaitFrames(30)
	GROUND:CharAnimateTurn(gapori, Direction.Down, 3, true)
	GROUND:CharAnimateTurn(player, Direction.Down, 3, false)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_16']))
	UI:SetSpeaker(STRINGS:Format("\\uE040"), true, "", -1, "", RogueEssence.Data.Gender.Unknown)
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_0']))
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Angry")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_17']))
	GROUND:Unhide("Kecleon")
	GAME:WaitFrames(5)
	GROUND:Hide("Kecleon")
	GAME:WaitFrames(5)
	GROUND:Unhide("Kecleon")
	GAME:WaitFrames(5)
	GROUND:Hide("Kecleon")
	GAME:WaitFrames(5)
	GROUND:Unhide("Kecleon")
	GAME:WaitFrames(5)
	GROUND:Hide("Kecleon")
	GAME:WaitFrames(5)
	GROUND:Unhide("Kecleon")
	GROUND:MoveInDirection(kecleon, Direction.Left, 24, false, 2)
	GROUND:MoveToPosition(kecleon, 92, 202, false, 2)
	GROUND:CharTurnToCharAnimated(kecleon, gapori, 4)
	UI:SetSpeaker(kecleon)
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_1']))
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_18']))
	UI:SetSpeaker(kecleon)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_2']))
	UI:SetSpeakerEmotion("Determined")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_2-1']))
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_19']))
	UI:SetSpeaker(kecleon)
	UI:SetSpeakerEmotion("Angry")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_3']))
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Sad")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_20']))
	UI:SetSpeaker(kecleon)
	UI:SetSpeakerEmotion("Angry")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_4']))
	GROUND:CharTurnToCharAnimated(kecleon, player, 4)
	GAME:WaitFrames(60)
	GROUND:CharSetEmote(kecleon, "notice", 1)
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GAME:WaitFrames(30)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Kecleon_5']))
	GROUND:MoveToPosition(kecleon, 99, 218, true, 4)
	GROUND:MoveInDirection(kecleon, Direction.Right, 79, true, 4)
	GROUND:RemoveCharacter("Kecleon")
	GROUND:CharSetEmote(gapori, "shock", 1)
	SOUND:PlayBattleSE("EVT_Emote_Shock")
	GAME:WaitFrames(30)
	UI:SetSpeaker(gapori)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Gapori_21']))
	GROUND:MoveToPosition(gapori, 99, 218, true, 4)
	GROUND:MoveInDirection(gapori, Direction.Right, 79, true, 4)
	GROUND:RemoveCharacter("Gapori")
	GAME:CutsceneMode(false)
  end
end

function amusement_castle_prison.PassThrough_Touch(obj, activator)
  if SV.amusement_castle_prison.noctowl == false then
    local noc = CH("Noctowl")
	GROUND:CharSetEmote(noc, "notice", 1)
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GAME:WaitFrames(30)
	UI:SetSpeaker(noc)
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Noctowl_0'], SV.playername))
	GROUND:MoveInDirection(noc, Direction.Up, 16, false, 2)
	GROUND:CharTurnToCharAnimated(noc, CH("PLAYER"), 4)
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Noctowl_1']))
	GROUND:MoveInDirection(noc, Direction.Right, 12, false, 2)
	GROUND:CharTurnToCharAnimated(noc, CH("PLAYER"), 4)
	UI:SetSpeakerEmotion("Happy")
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Noctowl_2']))
	GROUND:Hide("PassThrough")
	GAME:UnlockDungeon('td_amusement_dungeon')
	SV.amusement_castle_prison.noctowl = true
  end
end

function amusement_castle_prison.Noctowl_Action(chara, activator)
  UI:SetSpeaker(chara)
  UI:SetSpeakerEmotion("Happy")
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Noctowl_2']))
end

function amusement_castle_prison.Exit_Touch(obj, activator)
  if SV.global_quest.StoryProgression > 21 then
    GAME:FadeOut(false,20)
	GAME:EnterGroundMap("amusement_castle_ruins", "EntrancefromDungeon")
  else
    UI:ResetSpeaker()
    UI:ChoiceMenuYesNo(STRINGS:Format(STRINGS.MapStrings['Message_2']), false)
    UI:WaitForChoice()
    ch = UI:ChoiceResult()
    if ch then
      GAME:FadeOut(false,20)
	  if SV.global_quest.StoryProgression == 20 then
		GAME:EnterDungeon('td_throwback_land', 1, 0, 0, RogueEssence.Data.GameProgress.DungeonStakes.Risk, false, false)
	  else
	    GAME:EnterGroundMap("amusement_castle", "EntrancefromDungeon")
	  end
    end
  end
end

function amusement_castle_prison.DungeonEntrance_Touch(obj, activator)
  local dungeon_entrances = {'td_amusement_dungeon'}
  local ground_entrances = {}
  COMMON.ShowDestinationMenu(dungeon_entrances,ground_entrances)
end

function amusement_castle_prison.Block_2_Action(obj, activator)
  
end

function amusement_castle_prison.Vulpix_Action(chara, activator)
  local state = 0
  local repeated = false
  local cart = {}
  local catalog = { }
  for ii = 1, #SV.base_shop, 1 do
	local base_data = SV.base_shop[ii]
	local item_data = { Item = RogueEssence.Dungeon.InvItem(base_data.Index, false, base_data.Amount), Price = base_data.Price }
	table.insert(catalog, item_data)
  end
  GROUND:CharTurnToChar(chara,CH('PLAYER'))
  UI:SetSpeaker(chara)
  UI:SetSpeakerEmotion("Pain")
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Vulpix_0']))
  UI:SetSpeakerEmotion("Normal")
	while state > -1 do
		if state == 0 then
			local msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro'])
			if repeated == true then
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro_Return'])
			end
			local shop_choices = {STRINGS:Format(STRINGS.MapStrings['Shop_Option_Buy']), STRINGS:Format(STRINGS.MapStrings['Shop_Option_Sell']),
			STRINGS:FormatKey("MENU_EXIT")}
			UI:BeginChoiceMenu(msg, shop_choices, 1, 3)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			repeated = true
			if result == 1 then
				if #catalog > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy'], STRINGS:LocalKeyString(26)))
					state = 1
				else
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Empty']))
				end
			elseif result == 2 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				if bag_count > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell'], STRINGS:LocalKeyString(26)))
					state = 3
				else
					UI:SetSpeakerEmotion("Sad")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Empty']))
					UI:SetSpeakerEmotion("Normal")
				end
			else
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Goodbye']))
				state = -1
			end
		elseif state == 1 then
			UI:ShopMenu(catalog)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			if #result > 0 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				local bag_cap = GAME:GetPlayerBagLimit()
				if bag_count == bag_cap then
					UI:SetSpeakerEmotion("Sad")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Full']))
					UI:SetSpeakerEmotion("Normal")
				else
					cart = result
					state = 2
				end
			else
				state = 0
			end
		elseif state == 2 then
			local total = 0
			for ii = 1, #cart, 1 do
				total = total + catalog[cart[ii]].Price
			end
			local msg
			if total > GAME:GetPlayerMoney() then
				UI:SetSpeakerEmotion("Stunned")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_No_Money']))
				UI:SetSpeakerEmotion("Normal")
				state = 1
			else
				if #cart == 1 then
					local name = catalog[cart[1]].Item:GetDisplayName()
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), name)
				else
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
				end
				UI:ChoiceMenuYesNo(msg, false)
				UI:WaitForChoice()
				result = UI:ChoiceResult()
				
				if result then
					GAME:RemoveFromPlayerMoney(total)
					for ii = 1, #cart, 1 do
						local item = catalog[cart[ii]].Item
						GAME:GivePlayerItem(item.ID, item.Amount, false)
					end
					for ii = #cart, 1, -1 do
						table.remove(catalog, cart[ii])
						table.remove(SV.base_shop, cart[ii])
					end
					
					cart = {}
					SOUND:PlayBattleSE("DUN_Money")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Complete']))
					state = 0
				else
					state = 1
				end
			end
		elseif state == 3 then
			UI:SellMenu()
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			
			if #result > 0 then
				cart = result
				state = 4
			else
				state = 0
			end
		elseif state == 4 then
			local total = 0
			for ii = 1, #cart, 1 do
				local item
				if cart[ii].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[ii].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[ii].Slot)
				end
				total = total + item:GetSellValue()
			end
			local msg
			if #cart == 1 then
				local item
				if cart[1].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[1].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[1].Slot)
				end
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), item:GetDisplayName())
			else
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
			end
			UI:ChoiceMenuYesNo(msg, false)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
			
			if result then
				for ii = #cart, 1, -1 do
					if cart[ii].IsEquipped then
						GAME:TakePlayerEquippedItem(cart[ii].Slot)
					else
						GAME:TakePlayerBagItem(cart[ii].Slot)
					end
				end
				SOUND:PlayBattleSE("DUN_Money")
				GAME:AddToPlayerMoney(total)
				cart = {}
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Complete']))
				state = 0
			else
				state = 3
			end
		end
	end
end

function amusement_castle_prison.Teammate1_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

function amusement_castle_prison.Teammate2_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

function amusement_castle_prison.Teammate3_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

function amusement_castle_prison.Teammate4_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

function amusement_castle_prison.Teammate5_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

function amusement_castle_prison.Teammate6_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

function amusement_castle_prison.Teammate7_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end

return amusement_castle_prison

